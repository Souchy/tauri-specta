/* eslint-disable */
// This file was generated by [tauri-specta](https://github.com/specta-rs/tauri-specta). Do not edit this file manually.

/** user-defined commands **/

export const commands = {
	/**
	 * HELLO
	 * WORLD
	 * !!!!
	 * @param { string } myName
	 * @returns { Promise<string> }
	 */
	async helloWorld(myName)  {
	    return await TAURI_INVOKE("hello_world", { myName });
	},
	/**
	 * @returns { Promise<string> }
	 */
	async goodbyeWorld()  {
	    return await TAURI_INVOKE("goodbye_world");
	},
	/**
	 * @returns { Promise<Result<string, number>> }
	 */
	async hasError()  {
	    try {
	        return { status: "ok", data: await TAURI_INVOKE("has_error") };
	    } catch (e) {
	        if(e instanceof Error) throw e;
	        else return { status: "error", error: e  };
	    }
	},
	/**
	 * @returns { Promise<MyStruct> }
	 */
	async someStruct()  {
	    return await TAURI_INVOKE("some_struct");
	},
	/**
	 * @returns { Promise<void> }
	 */
	async generic()  {
	    await TAURI_INVOKE("generic");
	},
	/**
	 * @deprecated This is a deprecated function
	 * @returns { Promise<void> }
	 */
	async deprecated()  {
	    await TAURI_INVOKE("deprecated");
	},
	/**
	 * @returns { Promise<Result<null, MyError>> }
	 */
	async typesafeErrorsUsingThiserror()  {
	    try {
	        return { status: "ok", data: await TAURI_INVOKE("typesafe_errors_using_thiserror") };
	    } catch (e) {
	        if(e instanceof Error) throw e;
	        else return { status: "error", error: e  };
	    }
	},
	/**
	 * @returns { Promise<Result<null, MyError2>> }
	 */
	async typesafeErrorsUsingThiserrorWithValue()  {
	    try {
	        return { status: "ok", data: await TAURI_INVOKE("typesafe_errors_using_thiserror_with_value") };
	    } catch (e) {
	        if(e instanceof Error) throw e;
	        else return { status: "error", error: e  };
	    }
	},
	/**
	 * @returns { Promise<void> }
	 */
	async getLibrary()  {
	    await TAURI_INVOKE("get_library");
	},
	/**
	 * @returns { Promise<Result<string, string>> }
	 */
	async helloApp()  {
	    try {
	        return { status: "ok", data: await TAURI_INVOKE("hello_app") };
	    } catch (e) {
	        if(e instanceof Error) throw e;
	        else return { status: "error", error: e  };
	    }
	},
	/**
	 * Execute a command against the database
	 * @param { string } db
	 * @returns { Promise<Result<string, string>> }
	 */
	async addDb(db)  {
	    try {
	        return { status: "ok", data: await TAURI_INVOKE("add_db", { db }) };
	    } catch (e) {
	        if(e instanceof Error) throw e;
	        else return { status: "error", error: e  };
	    }
	},
	/**
	 * Execute a command against the database
	 * @param { string } db
	 * @returns { Promise<Result<string, string>> }
	 */
	async getDb(db)  {
	    try {
	        return { status: "ok", data: await TAURI_INVOKE("get_db", { db }) };
	    } catch (e) {
	        if(e instanceof Error) throw e;
	        else return { status: "error", error: e  };
	    }
	},
	/**
	 * `constructor` or `new`
	 * Actually should be static method that returns an instance and make the ctor private, so call it instance.
	 * 
	 * We can either pass the BlueStruct instance around, or use a State to store instances.
	 * If we use multiple instances in State, we need a way to identify/key them.
	 * Dont really want to mix both, because that's 2 sources of truth for the struct's data.
	 * Issue with passing instance, is doing stuff here in rust doesnt affect the instance in TS.
	 * So State it is.
	 * Some classes may be singletons, other will have keys.
	 * The constructor can return the key when needed.
	 * And generate getters/setters for the other fields.
	 * @param { string } someField
	 * @returns { Promise<Id> }
	 */
	async instance(someField)  {
	    return await TAURI_INVOKE("instance", { someField });
	},
	/**
	 * Now we can ignore State and Id parameters in the TS function.
	 * The class will hold the Id and pass it to the .invoke().
	 * @param { Id } structId
	 * @returns { Promise<Result<string, string>> }
	 */
	async getField(structId)  {
	    try {
	        return { status: "ok", data: await TAURI_INVOKE("get_field", { structId }) };
	    } catch (e) {
	        if(e instanceof Error) throw e;
	        else return { status: "error", error: e  };
	    }
	},
	/**
	 * @param { Id } structId
	 * @param { string } value
	 * @returns { Promise<Result<string, string>> }
	 */
	async setField(structId, value)  {
	    try {
	        return { status: "ok", data: await TAURI_INVOKE("set_field", { structId, value }) };
	    } catch (e) {
	        if(e instanceof Error) throw e;
	        else return { status: "error", error: e  };
	    }
	}
}

/** user-defined events **/

/**
 * @type {typeof __makeEvents__<{
 * emptyEvent: EmptyEvent
 * myDemoEvent: DemoEvent
 * }>}
 */

const __typedMakeEvents__ = __makeEvents__;

export const events = __typedMakeEvents__({
	emptyEvent: "empty-event",
	myDemoEvent: "myDemoEvent"
})

/** user-defined constants **/

export const universalConstant = 42;

/** user-defined types **/

/**
 * @typedef { string } Custom
 */

/**
 * @typedef { string } DemoEvent
 */

/**
 * @typedef { null } EmptyEvent
 */

/**
 * @typedef { string } Id
 */

/**
 * @typedef { { type: "IoError" } | { type: "AnotherError"; data: string } } MyError
 */

/**
 * @typedef { { type: "IoError"; data: string } } MyError2
 */

/**
 * @typedef { { some_field: string } } MyStruct
 */


/** tauri-specta globals **/

import {
  invoke as TAURI_INVOKE,
  Channel as TAURI_CHANNEL,
} from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";

/** @typedef {typeof import("@tauri-apps/api/webview").Webview} __Webview__ */
/** @typedef {typeof import("@tauri-apps/api/window").Window} __Window__ */

/**
 * @template T
 * @typedef {{
 *   listen: (
 *	   cb: TAURI_API_EVENT.EventCallback<T>
 *	 ) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
 *	 once: (
 *	   cb: TAURI_API_EVENT.EventCallback<T>
 *	 ) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
 *	 emit: T extends null
 *	   ? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
 *     : (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
 *	}} __EventObj__<T>
 */

/**
 * @template T,E
 * @typedef { { status: "ok", data: T } | { status: "error", error: E } } Result
 */

/**
 * @template {Record<string, any>} T
 * @param {Record<keyof T, string>} mappings
 * @returns {{
 * 	 [K in keyof T]: __EventObj__<T[K]> & {
 *	   (handle: __Webview__ | __Window__): __EventObj__<T[K]>;
 *   };
 * }}
 */
export function __makeEvents__(mappings) {
  const result = {};

  for (const key in mappings) {
    const name = mappings[key];

    const base = {
      listen: (cb) => TAURI_API_EVENT.listen(name, cb),
      once: (cb) => TAURI_API_EVENT.once(name, cb),
      emit: (payload) => TAURI_API_EVENT.emit(name, payload),
    };

    const withWindow = (window) => ({
      listen: (cb) => window.listen(name, cb),
      once: (cb) => window.once(name, cb),
      emit: (payload) => window.emit(name, payload),
    });

    result[key] = Object.assign(withWindow, base);
  }

  return result;
}
