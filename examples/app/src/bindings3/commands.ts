/* eslint-disable */
/* DO NOT EDIT. AUTO-GENERATED BY SPECTA */

import {
  invoke as TAURI_INVOKE,
  Channel as TAURI_CHANNEL,
} from "@tauri-apps/api/core";
import { Result } from './globals';
import { Custom, DemoEvent, EmptyEvent, MyError, MyError2, MyStruct } from './types';

/**
 * HELLO
 * WORLD
 * !!!!
 */
export async function helloWorld(myName: string) : Promise<string> {
    return await TAURI_INVOKE("hello_world", { myName });
}
export async function goodbyeWorld() : Promise<string> {
    return await TAURI_INVOKE("goodbye_world");
}
export async function hasError() : Promise<Result<string, number>> {
    try {
        return { status: "ok", data: await TAURI_INVOKE("has_error") };
    } catch (e) {
        if(e instanceof Error) throw e;
        else return { status: "error", error: e  as any };
    }
}
export async function generic() : Promise<void> {
    await TAURI_INVOKE("generic");
}
/**
 * @deprecated This is a deprecated function
 */
export async function deprecated() : Promise<void> {
    await TAURI_INVOKE("deprecated");
}
export async function typesafeErrorsUsingThiserror() : Promise<Result<null, MyError>> {
    try {
        return { status: "ok", data: await TAURI_INVOKE("typesafe_errors_using_thiserror") };
    } catch (e) {
        if(e instanceof Error) throw e;
        else return { status: "error", error: e  as any };
    }
}
export async function typesafeErrorsUsingThiserrorWithValue() : Promise<Result<null, MyError2>> {
    try {
        return { status: "ok", data: await TAURI_INVOKE("typesafe_errors_using_thiserror_with_value") };
    } catch (e) {
        if(e instanceof Error) throw e;
        else return { status: "error", error: e  as any };
    }
}
export namespace nested  {
	export async function someStruct() : Promise<MyStruct> {
	    return await TAURI_INVOKE("some_struct");
	}
}
export namespace library_service  {
	export async function getLibrary() : Promise<void> {
	    await TAURI_INVOKE("get_library");
	}
}