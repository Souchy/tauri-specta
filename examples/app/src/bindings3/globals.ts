/* eslint-disable */
/* DO NOT EDIT. AUTO-GENERATED BY SPECTA */

import {
  invoke as TAURI_INVOKE,
  Channel as TAURI_CHANNEL,
} from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type Webview as __Webview__ } from "@tauri-apps/api/webview";
import { type Window as __Window__ } from "@tauri-apps/api/window";

type __EventObj__<T> = {
  listen: (
    cb: TAURI_API_EVENT.EventCallback<T>,
  ) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
  once: (
    cb: TAURI_API_EVENT.EventCallback<T>,
  ) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
  emit: null extends T
  ? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
  : (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
  | { status: "ok"; data: T }
  | { status: "error"; error: E };

export function __makeEvents__<T extends Record<string, any>>(
  mappings: Record<keyof T, string>,
) {
  const result = {} as {
    [K in keyof T]: __EventObj__<T[K]> & {
      (window: __Webview__ | __Window__): __EventObj__<T[K]>;
    };
  };

  for (const key in mappings) {
    const name = mappings[key];

    const base: __EventObj__<any> = {
      listen: (cb) => TAURI_API_EVENT.listen(name, cb),
      once: (cb) => TAURI_API_EVENT.once(name, cb),
      emit: (payload: any) => TAURI_API_EVENT.emit(name, payload),
    };

    const withWindow = (window: __Webview__ | __Window__): __EventObj__<any> => ({
      listen: (cb) => window.listen(name, cb),
      once: (cb) => window.once(name, cb),
      emit: (payload: any) => window.emit(name, payload),
    });

    result[key] = Object.assign(withWindow, base);
  }

  return result;
}

